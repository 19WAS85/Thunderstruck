h1. Thunderstruck

Thunderstruck is a .NET library that makes access to database simpler and faster using ADO.NET. A really fast way to access databases.

h2. Another ORM?

No! Thunderstruck isn't a ORM. It doesn't abstract the powerful database, just makes the access easier.

h2. Download

Stable binary version => "download here":http://github.com/downloads/wagnerandrade/Thunderstruck/Thunderstruck-Bin-Stable.zip

h2. Licence

http://www.apache.org/licenses/LICENSE-2.0

h2. Quick Guide

h3. DataContext

Default connection string.

<pre>
<connectionStrings>
    <add name="Default" providerName="" connectionString="" />
</connectionStrings>
</pre>

Default DataContext.

<pre>
using (var context = new DataContext())
{
    context.Execute("DELETE FROM Cars");
    context.Execute("DELETE FROM Tools");
    context.Commit();
}
</pre>

Non transactional DataContext.

<pre>
using (var context = new DataContext(Transaction.No))
{
    context.Execute("DELETE FROM Cars");
    context.Execute("DELETE FROM Tools");
}
</pre>

Using another database (connection string).

<pre>
new DataContext("ConnectionStringName", Transaction.Begin)
</pre>

Get a value from database.

<pre>
var query = "SELECT COUNT(Id) FROM Tools";
object toolsCount = context.GetValue(query);
</pre>

Or typed...

<pre>
int toolsCount = context.GetValue<int>(query);
</pre>

Or get many values...

<pre>
var query = "SELECT Name FROM Tools";
var toolsName = context.GetValues<string>(query);
</pre>

List of objects from database.

<pre>
var cars = context.All<Car>("SELECT * FROM Cars");
</pre>

h3. Parameters Binding

Properties binding.

<pre>
var car = new Car { Name = "Esprit Turbo", ModelYear = 1981 };
var command = "INSERT INTO Car VALUES (@Name, @ModelYear)";
context.Execute(command, car);
</pre>

Select the cars of the future.

<pre>
var query = "SELECT * FROM Car WHERE ModelYear > @Year";
car futureCars = context.All<Car>(query, DateTime.Today);
</pre>

You can bind a Dictionary<string, object> too.

h3. DataObjectCommand

Creating a object command.

<pre>
var command = new DataObjectCommand<Car>();
</pre>

With property.

<pre>
public DataObjectCommand<Car> Command
{
    get { return new DataObjectCommand<Car>(); }
}
</pre>

Insert.

<pre>
var car = new Car { Name = "Esprit Turbo", ModelYear = 1981 };
command.Insert(car);
</pre>

Insert binds the generated primary key.

<pre>
// car.Id == 0
command.Insert(car);
// car.Id > 0
</pre>

Transactional DataObjectCommand.

<pre>
Command.Insert(car, context);

(...)

context.Commit();
</pre>

Update and Delete have the same behavior.

<pre>
car.Name = "Esprit S3";
Command.Update(car);

Command.Delete(car)
</pre>

h3. DataObjectQuery

Creating a object query.

<pre>
var select = new DataObjectQuery<Car>();
</pre>

Or...

<pre>
new DataObjectQuery<Car>(table: "TB_CARS");

new DataObjectQuery<Car>(primaryKey: "IdCar");

new DataObjectQuery<Car>(table: "TB_CARS", primaryKey: "IdCar");
</pre>

With property.

<pre>
public DataObjectQuery<Car> Select
{
    get { return new DataObjectQuery<Car>(); }
}
</pre>

<pre>
var allCars = Select.All();

var lotusCars = Select.All("WHERE Name Like '%Lotus%'");

var newerCar = Select.First("ORDER BY ModelYear DESC");
</pre>

Parameters binding.

<pre>
anyObject.CarName = "Lotus Esprit Turbo";

var cars = Select.All("WHERE Name = @CarName", anyObject);
</pre>

Transactional DataObjectQuery.

<pre>
Select.With(context).First("ORDER BY ModelYear DESC");
</pre>

h3. Custom DataObjects

bq. If TB_CARS is the name of the table.

Custom DataObjectCommand.

<pre>
new DataObjectCommand<Car>("TB_CAR");
</pre>

Custom DataObjectQuery.

<pre>
new DataObjectQuery<Car>("Name, ModelYear FROM TB_CAR");
</pre>

Projection with the default fields.

<pre>
new DataObjectQuery<Car>("{0} FROM TB_CAR");
</pre>

h3. More

Using a custom provider.

<pre>
ProviderResolver.CustomProvider = new MyProvider();
</pre>

Changing default connection string name.

<pre>
DataContext.DefaultConnectionStringName = "OtherDatabase";
</pre>